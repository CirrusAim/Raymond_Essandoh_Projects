from re import TEMPLATE
from types import MethodType

from werkzeug.wrappers import response
from DHKeyExchange import DHKeyExchange
from TripleSDES import TripleSDES
from flask import Flask, Response, request, jsonify 
import os,sys
import threading
import requests
import signal,time
from flask import render_template_string
FORMTEMP = """ <form method="post" action="/sendMessage">
                <input type="text" name="inputMsg" />
                <input type="submit" onclick="document.forms[0].submit();" /> 
                </form>
                <script>
                if ( window.history.replaceState ) {
                  window.history.replaceState( null, null, window.location.href );
                }
                </script>"""

chatContiner = """<div class='chatContiner' id='chatContiner'> """
chatEnd = """</div> """
chatHistory = None
secretKey = None
pubKeyDest = None
pubKey = None
priKey =None
Name = None
tgtName = None
tgtBaseUrl = None
isConnected = False

dhk = None
tdes = TripleSDES()

app = Flask(__name__)
app.debug= False

lock = threading.Lock()

def handler():
  print('CTRL-C pressed!')
  sys.exit(0)

@app.route('/',methods=['GET'])
def getName():
    return  chatHistory + FORMTEMP


@app.route('/getpub',methods=['GET'])
def getPubKey():
    template = """<h3>Public key of {} is : {} </h3>""".format(Name,pubKey) 
    return render_template_string(template,data=pubKey)

@app.route('/sendMessage',methods=['POST','GET'])
def sendMessage():
    global chatHistory
    print(request)
    if request.method == "GET":
        return chatHistory + FORMTEMP
    rawMsg = request.form["inputMsg"]
    bistr = string2bits(rawMsg)
    res = encrypt(bistr)
    binres = string2bits(res)
    encryptedMsg = "".join(i for i in binres)
    hexEncStr = hex(int(encryptedMsg, 2))
    try:
        
        tgtUrl = tgtBaseUrl + "/recvMessage"
        res = requests.post(tgtUrl,data = {'inputMsg':encryptedMsg})
        res.raise_for_status()
        chatHistory += """{}</b> sent to <b>{}</b> : <b>{}</b><br> """.format(Name,tgtName,hexEncStr)
        return chatHistory + FORMTEMP
    except Exception as e:
        return str(e)

@app.route('/recvMessage',methods=['POST'])
def recvMessage():
    rawmsg = request.form["inputMsg"]
    res = deciper(rawmsg)
    print("Recvd msh = ", res)
    global chatHistory
    chatHistory += """{}</b> Received from <b>{}</b> : <b>{}</b><br> """.format(Name,tgtName,res)
    return Response(status=200)
    

def flaskThread():
    print("Running in background : ")
    try:
        app.run(host,port)
    except Exception:
        exit(0)

def genPubPriKeys():
    global pubKey
    global priKey
    pubKey,priKey = dhk.genPubPriKeys()
    print("{}'s : Public key : ".format(Name),pubKey, " Private key : ",priKey)

def genKeys():
    global secretKey
    sharedKey = dhk.genSharedKey(pubKeyDest,priKey)
    bkey = dhk.genSecretKey(sharedKey,10)
    print(Name," : Shared key : ", sharedKey)
    secretKey = int(bkey,2)
    print(Name," : secret key generated by BBS generator : ", secretKey)

@app.route('/sendPubKey',methods=['POST'])
def sendPubKey():
    global pubKeyDest
    global isConnected
    data = request.get_json(force=True) 
    pubKeyDest = int(str(data["pubKeyDest"]))
    lock.acquire()
    isConnected = True
    genKeys()
    lock.release()
    print("updated public key in {}: {}".format(Name,data["pubKeyDest"]))
    return str(pubKey)

def initConnect():
    global pubKeyDest
    print("Trying to connect from : ", Name)
    
    while(True):
        try:
            """ Send own public key, receive destination public key """
            lock.acquire()
            if isConnected:
                print("Server already connected")
                break
            lock.release()
            pingUrl = tgtBaseUrl + "/getpub"
            resPing = requests.get(pingUrl)
            resPing.raise_for_status()
            url = tgtBaseUrl +"/sendPubKey"
            print(host, " : ",url)
            res = requests.post(url,json={"pubKeyDest": str(pubKey)})
            res.raise_for_status()
            pubKeyDest = int(str(res.json()))
            genKeys()
            break
        except Exception as e:
            time.sleep(5)
            continue
    print("Public : {} Private : {} Dest key : {}".format(pubKey,priKey, pubKeyDest))
    print("Connected to {}".format(tgtName))
def encrypt(cipherString):
    res = []
    for data in cipherString:
        cp = int(data,2)
        pt = tdes.encrypt(secretKey,cp)
        res.append(chr(pt))
    return res

def deciper(cipherString):
    dataLen = 8
    dataList = [cipherString[i:i+dataLen] for i in range(0, len(cipherString), dataLen)]
    finalStr = ""
    for data in dataList:
        cp = int(data,2)
        pt = tdes.decrypt(secretKey,cp)
        finalStr += chr(pt)
    return finalStr

def string2bits(s=''):
    return [bin(ord(x))[2:].zfill(8) for x in s]

if __name__ == '__main__':
    if len(sys.argv) < 4:
        print("Usage : python ",__file__," <Name> <host:port> <targethost:port>")
        exit(1)

    Name = sys.argv[1]
    hostStr = sys.argv[2]
    targetStr = sys.argv[3]

    
    if len(sys.argv) == 5:
        rangLower,rangUpper = sys.argv[4].split("-",2)
        dhk = DHKeyExchange(int(rangLower.strip(" ")),int(rangUpper.strip(" ")))
    else:
        dhk = DHKeyExchange()

    if Name.upper() == "ALICE":
        tgtName = "Bob"
    else:
        tgtName = "Alice"

    host,port = hostStr.split(":",2)
    tgtHost, tgtPort = targetStr.split(":",2)
    chatHistory =  """ User : [<b>{}</b>]<br> """.format(Name)
    tgtBaseUrl = "http://"+ str(tgtHost)+":" +tgtPort
    
    genPubPriKeys()
    thread = threading.Thread(target=flaskThread)
    thread.start()
    initConnect()
    signal.signal(signal.SIGINT, handler)
    signal.pause()

